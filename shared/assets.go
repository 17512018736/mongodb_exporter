package shared

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _groups_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xcb\x6e\x1b\xcb\x11\xdd\xeb\x2b\x1a\xda\xe4\x5e\x80\x11\x82\x64\xe7\xec\xae\xec\x00\x5a\x38\x59\x58\x06\x1c\xc0\xc0\xa0\x67\xa6\x48\x76\xd8\x33\x3d\xee\x07\x69\x7a\xe5\xdf\x08\x90\xfc\x9c\xbf\x24\xa7\xba\x7b\x5e\xe4\x48\x1a\x05\x08\xe0\x45\x36\x36\xd5\x8f\x7a\x9c\xaa\x3a\x55\x3d\xaa\x75\x5e\xb6\x15\xbd\xb9\x11\x22\x74\x5e\x35\xf1\x97\x10\x7b\xd2\xdd\x1b\xf1\xb8\x27\x71\x94\x3a\x90\x30\x5b\xe1\xf1\x47\x3a\x22\xb6\x8a\x74\x2d\x2a\x63\x2d\xb9\xce\xb4\xb5\x13\xde\xc4\xfd\x36\x34\x25\x59\x3e\xed\xa8\x4a\x1b\x7b\xe9\xe3\x56\x63\xda\x9d\x71\xc2\xd8\xf4\xab\x16\x9d\x35\x15\x39\x27\xf6\xd2\x89\x92\xa8\x15\xb2\xf2\xea\x48\x77\x51\xbf\x3f\x77\xf4\x06\x1a\x42\xeb\xc9\x0e\xb6\x15\xe4\xf0\x9f\xf4\x33\x23\x6f\xd3\xde\xbb\xbc\xc5\x72\x8f\xaa\x26\x37\x35\x18\x2a\x2a\xa9\xab\xa0\x71\xa0\x16\x5b\x6b\x1a\xf1\x9e\xad\x78\xfb\xdb\xef\x9c\x50\xac\xa3\x95\x9a\xd5\x59\x47\xbf\xdf\x59\xa9\x5a\x1c\x8b\x37\x0f\x44\x9d\x6a\x77\xc2\x9d\x9d\xa7\xe6\xee\x76\xd1\x3a\x6d\x20\xbd\xb8\x44\xef\x96\xe1\x8b\x5b\x8f\x2c\x29\x01\xa9\x92\x5d\x55\x00\x76\xad\x8f\x3a\x36\xf0\x1c\x58\xd6\xac\x26\xe3\xe8\xc8\x1e\xc9\x6e\x60\x9a\xf8\xf8\x78\x2f\x5c\x47\x95\x02\xe8\x35\x2f\xc8\x56\x3c\x7c\xf8\xdb\x5b\x76\x75\x6b\x2c\x5c\x5e\x34\xea\x46\x3a\x08\xf1\x8e\x0d\xb2\xb4\x83\xe7\xf6\xca\xb6\xbc\xde\xdf\x11\xde\xca\xea\xe0\x2e\x02\xd9\x1f\x4a\xf2\x94\x69\x9d\x00\x3e\x0e\xb6\x38\x85\xc4\x99\x98\x3b\x44\x14\x29\x65\x81\xf3\x9d\xb8\xdf\x53\x75\x88\x27\xb4\xd9\x21\x6b\x74\x34\x19\x09\x60\x01\x44\x9b\xac\x87\x44\x21\x4b\x13\x62\x96\x38\xe4\x09\x24\xc8\x1d\xb9\x27\xa0\x3e\x49\xdb\x02\xa8\x2b\x5f\xf2\xfa\xf3\xbe\xe4\x43\xff\x63\x0f\x7a\x2d\x4f\x78\xd0\xb8\x6b\xeb\xb1\xf6\xbc\xe5\x19\x95\x9f\x25\x0a\x01\xba\xae\x9c\xe0\xc5\xc1\x0b\x4b\x9d\x41\xfa\x5d\xb8\xf1\xe3\xfb\xbf\xe2\xa9\x9c\x9c\x3f\xbe\xff\x3b\x11\xc4\x5e\x1e\xc1\x31\x55\xac\x8a\xa9\x4b\x5a\xba\x54\x23\xcf\x3a\xf8\x18\x4d\x96\x70\x87\xac\x35\x36\x93\x4e\x54\xd4\xc8\xb3\xd8\x51\x4b\x16\xe5\xb2\x11\x2e\x54\x7b\xe6\x02\xf6\x13\xd6\xd4\xca\x1d\x50\x5b\x12\xca\x80\x47\x1d\x3a\xad\x2a\x2e\xab\x03\x9d\xef\xc4\xdf\x4d\x00\x67\xb4\xd0\x46\xc7\x58\xa9\x49\xc9\x88\x7f\x79\x06\x96\x5f\x39\xe7\x24\x9b\x54\x6a\x6a\xc4\x49\xf9\xbd\x38\x83\x46\x84\xec\x92\x34\x06\x96\x85\x53\xa7\xcd\xb9\x81\xa0\x69\x3c\x32\x07\xa5\xb8\x2c\x84\xe4\x09\xf4\xad\xd1\xda\x00\x09\x77\x5d\xd1\xfd\xce\x10\x07\xf8\xd8\x69\x79\xbe\x0c\x04\x63\x3a\x21\xe7\xfe\x5e\x7f\xcd\xa5\x88\xf0\x32\xe2\x11\x77\xfe\x8b\xa0\x8c\xd2\x4e\x4a\xeb\x51\x09\x48\xee\x1b\x59\x23\xe4\x96\x2d\xfc\xe3\x9f\xfe\x30\x81\xf5\x4e\x7c\x74\x2c\x18\x3c\x99\x08\x13\x87\x33\xa3\x43\x1c\xa4\x7d\xf5\x3d\x49\x1a\xfc\x63\xd3\x29\x26\xf1\xb8\x96\x13\x4b\xd4\xd2\x4b\xd8\x62\x43\xe5\x83\xa5\x65\x86\x2c\x51\x67\x3b\x8b\xbf\xea\x62\xab\x83\xdb\x67\x5a\x89\xbf\x69\x8e\x6d\x5e\x63\xf6\x96\x63\xa1\x32\x7a\x15\x43\x54\x5d\x25\x7a\x8f\x2f\x45\x4b\x4a\x09\x9f\xb8\xcf\x25\x39\xb5\x90\x80\xe3\x64\x95\xa7\xd8\x39\x39\x0f\x19\xb0\xc1\xe7\x08\x17\x4c\x3b\x71\xb2\x0e\x02\x6c\x40\xd6\x71\x9a\x68\xa4\x0d\x43\x4e\x56\x19\xb4\xd8\xac\x6e\x39\x57\xbc\xf1\x68\x4d\xcd\x75\xaa\xf4\x1b\x59\xe5\xac\x6b\xc6\xbd\x29\xfb\xc0\x1e\xd5\x77\xf4\x5f\x1a\xf7\xeb\x45\x5b\x1f\x9a\x39\xe5\xc4\x41\xc3\x42\xc9\xb0\x87\x5c\x1f\xbf\xa8\x3b\xba\x13\x3d\xc6\xbf\xa6\xe0\x0c\x7e\xff\x46\x95\x0c\x7d\xcc\x19\x60\x66\x22\x67\x74\xf0\xb9\x67\x6e\x38\xf0\x0e\xc6\xd9\xa8\xb1\x1f\x48\xfa\x98\xc8\x16\x78\x22\xad\x40\x57\xec\xce\x24\x5f\x4a\xf2\x3e\xe6\x74\x4a\x1b\x86\x2e\x2a\x81\xfe\xd0\x2c\xc3\x35\x0a\xba\x02\x6c\xa2\x23\x99\x00\xb4\x2a\xab\xca\x8c\x99\x25\x1d\x6b\x16\x3e\x76\xac\xf9\xc4\x23\xcd\x3c\x29\xa6\x16\x8f\x30\xcb\x86\xb5\xf7\x51\x1c\x91\x9d\x25\xce\x1c\xd0\x39\x80\x71\xcc\x90\x96\x53\x62\xcc\xd3\x4d\x8e\x0e\x08\x45\xab\x03\xe9\xf3\xb4\xa6\xf0\xa3\x5f\x34\xcc\xd4\x18\xe3\x58\xbc\x14\x9f\x6f\x5b\xe6\x1e\xbd\xf9\x7c\x1b\xad\xf9\xb3\xd8\x9b\x13\xc5\x51\x44\x96\x69\x2b\x29\x67\x66\x74\x07\x3a\x4d\xa4\x4e\x01\xdd\xc9\xb0\x23\x1e\x8c\x40\x15\x4b\x58\xce\x86\xca\x7c\x28\x4f\x95\x79\x40\x9a\xa3\x12\x27\xa1\x69\x16\x6e\x46\x9c\x22\x1d\x45\xc7\x85\xe9\x98\xe8\x99\x72\xbd\x31\x07\x76\xae\x32\x4d\xa7\xc9\xd3\x12\xad\xc0\x2d\xb5\x3d\x8f\x82\xfa\x99\x0c\x42\x22\x03\x33\xdf\x65\x13\x33\xc9\x71\xe0\x54\xe4\x1a\x8d\x09\x31\xb1\x3d\x6f\x43\xac\x37\x16\x74\x9f\xd1\xc9\x09\x58\x73\x8f\x98\xa4\x4d\x8c\x7b\x2e\xbb\x27\xd1\xda\xaa\x56\x31\x47\x5c\x4f\x92\xd3\xdd\x0c\xd6\x50\xb5\x32\x31\x8e\x97\x4d\x37\x85\x75\xf0\xbf\xbe\x42\x28\x13\x66\x1e\x25\xf3\x24\x29\x1e\xb6\x17\x79\x12\x33\x08\x10\xa1\x28\xc5\x16\xf1\x6e\x54\x1b\x98\xb6\x0c\xb4\xa7\x94\x3f\x46\x30\x63\xd3\x4b\x30\xfd\xf8\xfe\x4f\x37\x1b\x70\x53\x89\x56\xb1\xca\x38\x7d\xb9\x10\x6b\xb5\xdd\x12\x4e\x54\x99\xbb\xf9\xd8\x37\xd3\x22\xd2\x96\x62\x0f\x89\xd3\xf0\xb4\x0c\xb8\x95\x63\x2f\x68\xcf\x17\x9c\x69\xd2\x1e\xd8\xd0\x2d\xa0\x79\x83\x34\x69\x41\xcc\x5c\x91\x0c\x65\xb6\xe7\xe9\x4c\xec\x0d\x7e\xf6\x55\x33\x11\xda\x6f\x0e\xf6\xe5\x1c\x89\x8f\x8b\x4a\x2b\xc8\x72\x99\xd4\xf3\x7d\x34\x50\x1d\x7a\x8a\xed\xd5\x21\x98\xe0\x7a\x10\xa7\xe3\x7e\x2f\xee\x97\x98\x0e\x39\x24\x95\x96\x98\x30\x58\xa9\xac\xeb\x14\x95\x59\x3b\x5c\xa2\xb5\x3e\xaf\x86\xeb\x33\xef\x47\xa1\x93\x2c\xaa\x86\xaa\x9b\xf9\x1d\xda\xc0\xb3\xe6\x78\x05\xbe\x98\x26\xcd\xdb\x13\x44\xa6\x70\xa4\xd9\x29\x0a\x9e\xb9\x35\x26\x57\xcb\xd9\x59\xaa\x36\xe5\xe3\x50\x4c\x57\x11\x81\x7f\xe8\xd1\x18\x23\x7c\x4f\x9c\xa3\x52\x44\x5f\x62\x40\x69\x67\xba\x37\x03\xc3\x7e\xfc\xeb\xc3\x27\x11\xb4\x6a\x94\x17\x1f\xd0\x0d\xe2\xf0\x5f\x9b\x2a\xf0\x24\xf6\xdc\x14\x9c\x9e\x7b\x90\x81\x5c\xd8\x23\xd7\x1d\xeb\x18\xdd\x9f\x78\xbd\x04\x78\x2a\xf2\xca\x12\x3f\x37\x67\xa0\xc7\x9d\xfb\xb4\xb1\x88\x3b\x4f\x06\x8b\xe0\x66\x69\xf3\x17\xe2\x13\x09\x36\x0f\x4a\x3f\x5f\xa7\x09\xae\x42\xbd\x50\xbd\x38\x10\xd5\xc1\xca\x52\x69\xe5\xcf\xb1\x62\x4c\x03\xd8\xe6\xdc\xfd\x97\x87\x4f\xef\xdf\x2d\x79\xfc\x0f\x94\x3f\x9e\xd0\x54\x17\x4d\xb9\xee\x46\x1c\x7f\x0a\x6f\x0a\x8e\x5a\xc1\xaf\x12\xb7\xfa\x2e\xb3\x9a\x4d\x25\xb3\xfa\x02\xfb\x52\xa8\xb6\x48\x7a\xf1\x2c\x3f\xac\xbb\x4a\xd2\xea\x73\xb1\x0a\x0c\x17\x9a\x46\xda\xf3\x14\xc8\xf8\x51\x20\x77\xc0\xda\xaf\xbb\x2e\xf8\xcd\xd1\xc1\xc4\x5d\x51\x06\x66\xc9\xb5\xd7\x06\x48\x73\x34\x5e\x7d\x6f\x0c\xc5\xda\xab\x96\x1a\xd9\x15\x9d\x55\x47\x24\x67\x71\x54\x74\x5a\x09\x11\x88\xcb\xca\x82\x0b\x8f\x2f\x74\xdc\x21\xb7\x12\xdc\xbe\x32\xdf\xf6\x04\xb5\x81\x9f\xa8\x45\x79\xf6\x2f\xd9\x9b\x5b\xc2\x4e\x9b\x12\x75\xd9\xc7\x3e\x55\xe9\xd5\x57\x9b\xab\xdb\xb3\xef\x3c\x87\x57\x5d\x88\xbd\xf6\xb5\xb6\x15\x99\xf8\x8a\x2f\x81\x02\x0d\x96\xae\x03\x06\x2c\x51\x5f\xbe\x0c\x9f\xaf\xc1\x75\x87\xe7\x06\xc6\xf6\xf6\xb3\x58\xa6\xd0\x1c\xbe\x16\xfd\x5b\x93\xaf\x60\xd6\x88\x8f\x91\xb5\x61\xda\xbf\x58\xda\x93\xcf\x37\xea\x35\x92\x79\xb2\x5e\x9b\xd3\x2c\xb9\x58\x9f\x31\x1c\x09\x97\xf8\x85\x7f\x32\xf5\xaa\xca\x9a\xa8\x2c\x07\xeb\x05\xe6\xb8\xfc\x80\xb9\xfa\x78\x16\xff\x42\xad\x5f\x8a\x5f\x79\x7c\xea\x98\xac\xbe\x04\x65\xd1\x0a\xaf\x7d\x5b\xad\xfc\x75\x58\xdc\xb4\x78\xba\x19\x1b\x09\x22\x32\x0b\x38\x6a\x5d\xf8\xd2\x69\x0c\x0f\xeb\x8e\xa3\x67\x17\x96\x50\xe2\x6e\x5d\x7e\xdc\x98\x6e\x96\xe3\xaa\xe5\x2f\x1d\xeb\x74\x41\x8b\x3d\xaf\x3b\x1a\xba\xfa\xf2\xfb\xfa\x93\x67\x6b\xe2\xa7\xc5\xba\xb3\x3b\xf2\x3c\x6a\xad\x6f\xd7\x18\xe1\x5e\x0b\x0b\xf0\xec\xf4\xff\xb1\x19\xb1\x69\x08\x72\xa3\x73\xe5\x2b\x18\x0e\x9c\x85\xa9\xb4\x7d\x01\xbf\xf1\xfc\x51\x59\x1f\xd6\x76\x01\x8c\x0b\x1d\xad\xb2\xbe\x3f\x5b\xf0\xcb\x60\xdd\x48\x33\x14\xf1\xcd\x7f\x02\x00\x00\xff\xff\x6e\x8c\x13\xf9\xd8\x1a\x00\x00")

func groups_yml_bytes() ([]byte, error) {
	return bindata_read(
		_groups_yml,
		"groups.yml",
	)
}

func groups_yml() (*asset, error) {
	bytes, err := groups_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "groups.yml", size: 6872, mode: os.FileMode(420), modTime: time.Unix(1423579018, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"groups.yml": groups_yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"groups.yml": &_bintree_t{groups_yml, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

