package shared

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _groups_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\xcb\xae\x1c\xb7\xd1\xde\xeb\x29\x08\x6d\x7e\x09\x18\x1d\x0b\xb6\xe1\x85\xfe\x95\x25\xdb\x88\x02\x29\x36\x74\x89\x1d\xc0\xc0\x80\xd3\xcd\x99\x61\x4e\x77\xb3\x4d\x76\xcf\x68\xb4\xd2\x6b\x04\x70\x5e\x4e\x4f\x92\xaa\x62\x91\x4d\xf6\x65\xce\x4d\x8a\x13\x20\x40\xe0\x1c\x35\x6f\x55\x1f\x8b\x1f\xab\x8a\x35\xba\x71\x9d\x6c\x0a\xf5\xe4\x9e\x10\x7d\xdb\xe9\x9a\xfe\x12\x62\xaf\xaa\xf6\x89\xb8\xff\x66\xaf\xc4\x41\x56\xbd\x12\x66\x2b\x3a\xf8\x87\xef\x23\xb6\x5a\x55\xa5\x28\x8c\xb5\xca\xb5\xa6\x29\x9d\xe8\x0c\xb5\x37\x7d\xbd\x51\x16\x7b\x3b\x55\xf8\x86\xbd\xec\xa8\xa9\x36\xcd\xce\x38\x61\xac\xff\xab\x14\xad\x35\x85\x72\x4e\xec\xa5\x13\x1b\xa5\x1a\x21\x8b\x4e\x1f\xd4\xc5\x7d\x92\xa0\x3b\xb5\xea\x09\x2c\xd1\x37\x9d\xb2\x51\xba\xb5\x72\xf0\x7f\xb2\xcb\xc5\xf4\x6d\xdf\x73\x13\x4e\x7c\xd0\xa5\x72\xa9\xc4\xb0\x46\x21\xab\xa2\xaf\xa0\x43\x29\xb6\xd6\xd4\xe2\x25\x8a\xf1\xdd\xd3\xff\x73\x42\xe3\x1a\x8d\xac\x70\x39\xeb\xd4\xa3\x9d\x95\xba\x81\x6e\x34\xf2\x52\xa9\x56\x37\x3b\xe1\x4e\xae\x53\xf5\x82\x74\x95\x81\xd9\xd7\xb3\xf8\x51\xd3\x1b\x9c\xc9\x23\xa9\xbd\x5c\x45\x0f\xe0\x35\x1d\xad\xb1\x02\xd5\x01\xcc\x12\x97\x61\x20\x9d\xb2\x07\x65\x57\x20\x9a\x78\xfb\xe6\x99\x70\xad\x2a\x34\xa0\x5e\xe2\x07\xd9\x88\xe7\xaf\x7f\xfc\x0e\x55\xdd\x1a\x0b\x2a\xcf\x0a\x75\x4f\x3a\x98\xa4\x73\x28\x90\x55\x3b\xd0\xdc\x4e\x64\xe3\xef\x61\x8c\xe8\xac\x2c\x2e\xdd\x68\x27\x43\x27\x3f\x9f\x36\x8d\x13\x80\x8f\x03\x59\x9c\x06\xd3\x49\xc4\x8d\x5b\x0a\x46\x65\x01\xe7\x0b\xf1\x6c\xaf\x8a\x4b\xea\x51\x99\x1d\x98\x4d\x45\x22\x83\x05\x58\x00\xa2\xf1\xd2\xc3\x8c\x42\x6e\x4c\x4f\x66\xe2\xc0\x50\x60\x06\xb9\x53\x6e\x01\xea\xa3\xb4\x0d\x00\x35\xd1\x85\xbf\x9f\xd7\x85\x3b\x7d\x66\x0d\xc2\x2a\x0b\x1a\xd4\x6e\x2a\x3d\x7c\x3b\x2f\x39\xa3\xf2\x9f\xb2\x0b\x3d\xac\x35\x51\x02\x3f\x46\x2d\xac\x6a\x0d\x98\xdf\x48\x8d\x8f\x1f\x7e\xa7\x5e\x6c\x9c\x1f\x3f\xfc\xd3\x33\xc4\x5e\x1e\x80\x64\x0a\x3a\x15\xa9\x4a\x95\x74\xfe\x8c\x9c\x55\xf0\x0d\x89\x2c\x41\x1d\x65\xad\xb1\xcc\x3a\xb4\x50\x2d\x4f\x62\xa7\x1a\x65\xe1\xb8\xac\x84\xeb\x8b\x3d\x72\x01\xea\x09\xd2\x94\xda\x5d\xc2\xd9\x92\xb0\x18\xe0\x51\xf6\x6d\xa5\x0b\x3c\x56\x97\xea\x74\x21\xfe\x66\x7a\xe0\x8c\x06\x56\x53\x07\x3a\xa9\x7e\x91\x01\xff\xcd\x09\xb0\x7c\x87\x36\x27\x51\xa4\x4d\xa5\x6a\x71\xd4\xdd\x5e\x9c\x80\x46\x84\x6c\xfd\x6c\x08\x2c\x4e\xae\xda\xca\x9c\x6a\x98\x28\xdd\x0f\xe6\x20\xbf\x2f\x33\x5b\xb2\x80\xbe\x35\x55\x65\x00\x09\x37\x3d\xd1\xa1\x25\xee\x03\xe8\xd8\x56\xf2\x34\xde\x08\xc4\x34\x61\xe7\x30\x2e\x0c\x73\x7e\x47\xf0\x33\xec\x07\xb5\xdc\x62\x53\x86\xd9\x8e\xba\xaa\x86\x45\x80\xe4\xde\x2b\x6b\x84\xdc\xa2\x84\x5f\x7e\xf5\x38\x81\xf5\x42\xbc\x75\x38\x31\xf0\xa4\x27\x4c\xe8\xcc\x8c\x0e\xd3\xc1\x6c\xef\xba\x40\x92\x06\xfe\x63\x7d\x2f\x24\x71\xfa\xc6\x86\x25\x4a\xd9\x49\x90\xc5\xf6\x45\xd7\xdb\xf9\x4b\xe5\xde\x06\xce\xd9\xce\xc2\xbf\xca\xf5\xb6\xea\xdd\x9e\x69\x85\xfe\x56\x39\xb6\xfc\x0d\xd9\x5b\x0e\x07\x15\xd1\x2b\x10\xa2\x62\x62\xe8\x01\x5f\x45\x92\x6c\x24\xe8\x84\x17\x9d\x9f\xa7\x14\x12\xe0\x38\x5a\xdd\x29\xba\x3a\xd1\x0e\x11\xb0\xa8\x33\xc1\x05\xa2\x1d\xd1\x58\xe3\x04\xb6\x07\xab\x43\x33\xa9\xc0\x6c\x10\x72\x65\xb5\x81\x3b\x96\x97\x9b\xb7\x95\xce\x74\x70\x35\xd5\x53\x53\x09\x0d\xbc\x64\x76\x6b\x52\x5b\xca\x3e\x20\x8f\x0e\x57\xfa\x83\xda\x3d\x1c\xdd\xeb\xf1\x36\x57\x6c\x38\x70\x61\xc1\x91\x41\x0d\xf1\x7c\x3c\xd0\x17\xea\x42\x04\x8c\x1f\xfa\xcd\x89\x7a\x3f\x55\x85\xec\xc3\x9e\x23\xc0\xc8\x44\xce\x54\x7d\xc7\x77\xe6\x0a\x37\xde\x81\x70\x96\x56\x0c\x1e\x49\xd8\x13\xd9\x00\x9e\x60\x56\x40\x57\xa8\x4e\x62\x2f\x1b\xd5\x75\x64\xd3\xde\x6c\x10\x3a\x5a\x04\xd6\xef\xeb\x79\xb8\x86\x89\x26\x80\x25\x6b\x78\x11\x00\xad\xc2\xea\x0d\x63\x66\x55\x45\x67\x16\x74\x6c\x71\xe5\x23\xfa\x34\xb9\x51\xa4\x12\x0f\x30\xcb\x1a\x57\x0f\xbb\x38\x20\x9b\x19\x4e\x0e\x68\x0e\x20\xb9\x19\xd2\xa2\x49\x0c\x76\xba\xe2\xdd\x01\x42\xa9\xf4\xa5\xaa\x4e\xe9\x99\x82\x3f\xc2\x47\x83\x4c\x0d\x7e\x1c\x4e\x2f\xc5\xaf\xf7\x1b\xe4\x9e\x6a\xf5\xeb\x7d\x92\xe6\xff\xc5\xde\x1c\x15\xb9\x22\x72\xe3\x9b\xfc\xe2\xc8\x8c\xee\x52\x1d\x93\x59\x53\x40\x77\xb2\xdf\x29\x74\x8c\x80\x2a\xe6\xb0\xcc\xbc\x4a\xee\xc4\x6e\x25\x3b\x48\x39\x2a\xe4\x09\xa5\x56\xb8\x1a\x70\x22\x3a\x22\xc5\x85\x69\x91\xe8\x91\x72\x3b\x63\x2e\x51\xb9\xc2\xd4\x6d\xa5\x3a\x35\x47\x2b\xa0\x96\xde\x9e\x86\x89\x82\x4f\x06\x93\x10\x03\x23\xdf\xb1\x88\x4c\x72\xb8\x71\x9a\xb8\xa6\x02\x0f\xd1\xb3\x3d\x36\xc3\xb4\x9d\xb1\x40\xf7\x8c\x0e\x1b\x60\x89\x77\x44\x62\x36\xb4\xef\x7c\xec\x16\xd1\xda\xea\x46\x23\x47\x4c\x3d\xc9\xb4\x95\xc1\x8a\xa7\x56\x7a\xc6\xe9\x64\xdd\xa6\xb0\x46\xfd\xcb\x09\x42\x4c\x98\xec\x4a\xb2\x27\x29\x9e\x6f\x47\x76\x42\x16\x04\x10\xc1\xa1\x14\x5b\xd8\xef\x5a\x37\x3d\xd2\x96\x81\xd5\xbd\xc9\x1f\x08\x4c\xba\xf4\x3c\x4c\x1f\x3f\xfc\xc3\x65\x0e\xae\x3f\xa2\x05\x9d\x32\x34\x5f\x3c\x88\xa5\xde\x6e\x15\xf4\x28\x98\xbb\xb1\xdb\x7b\xd3\xc0\x4e\x5b\x45\x77\x08\x79\xc3\xe9\x31\xc0\xab\x1c\xda\xfa\xaa\xc3\x01\xce\xd4\xbe\x0d\xd8\xd0\xcd\xa0\x79\x0f\xcc\xa4\x01\x62\xc6\x13\x89\x50\xb2\x3c\xcb\x96\x18\x04\x3e\x1b\xd6\x24\x93\x86\xc6\x28\x1f\xdb\x08\x05\x17\x45\xa5\x61\x2e\xc7\xa4\xce\xe3\xe1\x02\xad\xfa\x40\xb1\x61\x39\xd8\x4c\xe0\x7a\x20\x4e\x87\xf7\xbd\x78\x36\xc7\x74\x60\x43\x52\x57\x12\x3c\x0c\x5c\x54\x96\xa5\xdf\x95\xec\x3a\x9c\xa3\xb5\x60\x57\x71\x78\xa6\xfd\x30\x69\x62\x45\x45\x3c\x75\x99\xde\x7d\xd3\xa3\xaf\x39\x0c\x01\x5d\x4c\xed\xfd\xed\x04\x91\x14\x0e\xef\x3b\xd1\xc4\x99\x5a\x83\x71\x35\x68\x9d\x1b\xdd\x78\x7b\x8c\x87\x69\xb2\x23\xa0\x1f\xdc\xd1\xe0\x46\x74\x81\x38\x87\x45\x61\xf7\x25\x38\x28\x4d\xb6\xf6\x2a\x32\xec\xdb\xbf\x3c\xff\x45\xf4\x95\xae\x75\x27\x5e\xc3\x6d\x40\xce\x7f\x69\x8a\x1e\x3d\xb1\x73\x5e\xb0\x0f\xf7\x60\x0e\xb0\x85\x3d\xd8\xba\xc3\x35\x06\xf5\x13\xad\xe7\x00\xf7\x87\xbc\xb0\x0a\xc3\xcd\x0c\x74\x6a\x79\xe6\x1b\x66\x71\x47\xcf\x60\x16\x5c\x9e\x2d\x8f\x10\x17\x0c\x2c\xdf\x94\xe0\x5f\x7b\x0f\xae\x80\xf3\xa2\xca\x59\x87\xa8\xec\xad\xdc\xe8\x4a\x77\x27\x3a\x31\xa6\x06\xd8\xa6\xdc\xcd\xdf\x73\x8f\x21\xf1\x7c\xac\x6c\x9c\xe4\xc5\xf1\xc2\xea\xf0\x1e\xf4\x42\xff\x1d\x48\x02\x03\x6d\x58\x28\x1c\x6f\x62\xa9\xf0\x1d\xbd\xb1\x96\x17\xf0\x61\x39\x18\xc3\xc5\x1c\xc2\x3c\x42\x95\xeb\x7a\x33\x91\x30\x36\xbe\x7c\x9a\x4b\x39\x5c\x2a\xc4\x1c\x78\xa7\xa8\x9d\xdc\x9c\x90\xd0\x1e\xbc\x7c\xfa\x30\x95\xf7\x56\xb2\xce\x89\x4a\x7e\xde\xba\x33\x6b\x5c\x73\x8d\xe1\x97\x9b\x13\x9a\xba\xbd\x31\x40\xc6\xf2\x07\xec\x73\x6b\xd9\x89\x80\x82\x94\x09\x49\x51\xe4\xe7\xee\xae\x0f\x5e\x29\xd6\xf3\xd5\x9c\x6d\x84\xb6\xc1\xaf\x60\xc2\x4b\x9b\xf0\xa8\x05\x96\x21\xd9\xe6\x0d\xe5\xc9\xbd\x07\xc9\x4e\x3b\xfd\x5e\xad\xcd\x96\x70\x14\x5f\x00\x27\x84\x29\xc7\x6d\x0f\x17\xc4\x46\xb3\x5d\xeb\x66\xed\x77\xa4\x32\xc5\xe5\x92\x71\x3f\x6f\x7e\xc6\x3e\x2f\xa0\xcb\x22\x3b\x86\x73\x40\x07\x2c\xc6\xae\xc7\x3d\xc6\xd7\x5e\x21\xca\xfe\x5c\x8a\x23\xf8\x6f\xb0\x04\x46\xe2\x3c\x04\xb3\x38\x69\x0f\xdd\x94\x3e\xf2\x94\x31\x24\x6c\x0c\x38\xb0\x44\x7b\xf0\x71\xaf\xe4\xe1\x14\x07\x00\xe1\x21\xbf\x15\x48\x15\x48\x61\xdb\xde\x52\x24\x54\x6a\xb9\x6b\x8c\xd3\xb3\x94\xa4\xa4\xad\x4e\xeb\xa5\x33\x4d\xad\x41\x3a\x4f\xc0\x56\x6d\x97\x03\x9b\x20\xa5\x55\xbf\x41\xf0\x85\xb4\x24\x83\xe9\x6c\xd0\x97\xe0\xd0\xb0\x00\x4f\xa5\xc7\x08\xf2\xfc\x01\x9f\xf1\xcd\x54\xe3\x7a\xcb\xce\x30\xb9\x16\x67\x67\x40\x47\xa5\x31\x78\x53\x18\x0a\x8e\x08\x16\x1a\x36\xc4\xdd\x29\x28\xae\xaf\x6b\x69\x4f\x29\xe3\x51\xf6\x8e\x5d\xd5\x72\xea\x26\x94\xdd\x28\x4e\x9a\xf5\x48\xc7\x6e\xab\x8f\x9c\xc1\x24\x8a\x7d\x84\x8c\x03\x46\xc5\x21\x00\xf4\x7a\xf9\x1a\xad\x36\x41\xc1\xfb\x76\x57\x05\xbe\x7e\x28\x77\xf6\x51\xf0\x9c\x8e\x02\x33\x18\x2d\x58\xfb\x6e\xbd\xe9\xd1\xe7\x9a\xe8\x86\xed\x2f\xcc\xee\x29\xb5\xde\x4a\x4d\x1f\x9d\xe0\x3c\xd2\x72\x16\xd3\x1b\x6b\x7e\x9c\x2f\xc4\x6b\x08\x20\xaa\x34\x68\x67\xbb\xe7\x48\x2d\x6c\x72\xe2\x81\xcf\xab\x14\x39\x35\x12\xc5\x3c\x9b\xfe\x99\x27\xbc\xbd\x52\x70\x93\xf5\x20\xf3\x29\xc6\x5e\x63\x95\x90\xac\x83\xbb\x00\x43\x54\xe9\xfd\xfc\x52\x1d\x74\xa1\xbc\x85\x6e\x25\x7a\xb9\xe8\x10\x49\x80\xb8\xe8\x6e\xa0\xdf\x70\x67\x5c\x79\x61\xdc\x41\xc9\x44\xb7\xe4\xa6\xf0\xe9\x19\x56\x14\x9a\x3f\x93\xae\x56\xd5\xb2\x5d\xb7\x56\x1f\xc0\x12\xd6\x07\xad\x8e\x33\x89\x6a\xe8\xf2\x93\xef\xf1\x57\xe8\x70\x07\x55\x69\xaa\xd6\x3b\x57\xed\xe9\x91\x69\x1e\x79\x4b\xad\x15\x78\x82\x27\x81\x8d\x70\x34\x51\x0a\xf7\xa9\xcc\xf5\x1e\x1c\x5d\x2b\xd7\xe8\x64\xa2\x66\x2d\x46\x83\x5b\x09\x71\xcc\x74\x4f\x93\x36\xf1\x2a\xc9\xa0\x8e\x13\x32\xd8\x4f\x70\x3f\xe2\x48\x24\x62\x0d\x84\x49\x29\xcd\x18\xe4\x81\x0a\x3f\x25\x3d\x81\xd2\x7d\xf6\x6d\xe8\x90\x8f\x9e\x8b\x67\x30\xe2\x28\x28\xb5\xe7\x2f\x6a\x22\x33\xed\x1a\x88\xf2\xba\x2c\x20\xe0\x07\x1c\x46\xd2\xa7\x25\x52\x7d\x42\xda\x0c\xe3\x38\xf0\x44\xc1\x9d\x85\x45\x4a\x2b\xd1\xef\x2e\xe8\x88\xb1\x6b\x52\x9b\x9a\xbc\x06\xd4\xd3\x18\x9b\xc5\xe3\x68\x6e\x38\x01\x45\x69\xf8\x9a\xe3\xe3\x06\xf2\xf0\x61\xdf\x78\x17\x55\x73\xd0\xd6\x34\x7e\x1a\x1c\xc2\xe9\x11\x9f\x15\x54\x18\x98\xbd\xe0\x11\xd8\x0a\xd1\x9e\x95\xb0\xb5\x19\xac\xa5\xa1\x2b\x05\xfc\x68\x4c\x85\x5b\x5d\x9d\x92\x6b\x1a\xc2\x67\xe7\xe6\x53\x1e\x70\x57\xb7\xeb\x1e\x93\xe7\x6b\x72\xce\x26\x7b\x3c\xee\x30\xe4\x3d\x4c\x53\x9d\x12\x48\xc1\x51\x7a\xdb\xe8\x77\x5f\xbc\x80\x90\xfb\x1d\x1f\x3b\xe7\x63\x1b\x3b\xb1\x0d\x74\x80\x70\x13\xfc\x94\x00\x1d\x2e\xc3\xc9\x6d\x8a\xdd\x36\xa7\x7c\x7b\x39\x63\x37\x13\x39\xef\x2a\xb3\x81\xf0\x25\xf8\x47\x3e\x98\xb9\xe2\x71\x10\xfb\xd0\x2b\xd7\xc8\xeb\x4b\x92\x37\x85\x35\xf1\x78\x0e\xc9\xe4\x28\x0f\x39\xa3\x9c\x3d\xf6\xfe\x0d\x06\x3c\x94\x3e\xf7\xfe\x96\x17\x0b\x5d\x32\x8e\x7a\xe0\x7f\xe0\x0c\xec\xf6\x00\x1a\xda\x2f\x08\xc3\xd1\x22\x23\xe2\xed\xd7\xbf\x00\x2e\xbe\xdb\x5d\x5e\xa1\x19\x76\xf9\x74\x8a\x25\x69\xab\x41\x9d\xe1\x09\x14\xbd\xc4\x85\x94\x3f\x42\xb1\x2c\xa5\x77\xa8\xb3\x5c\xff\x6c\x3e\x32\x6a\x13\x53\x51\xf8\x2f\x38\x0d\xe6\x38\x21\x39\xef\xd7\x0e\x4c\x41\x31\xe4\x9e\x3c\x93\x5c\xfc\x2d\x79\x81\x4d\x07\xfb\x80\x7e\x17\xc4\xcb\xb6\x9b\xa6\xa7\x2f\xc4\x9f\xf4\x6e\x7f\x83\x55\x92\x15\x80\x3a\xf3\x35\xae\xce\x80\x4f\x6d\x79\xcd\xf9\x84\x35\x4c\xd4\xab\x68\xd9\x57\x18\x75\xee\xfe\x63\xba\x42\x31\x72\xd8\x25\x11\x9c\x66\x05\xff\x5f\xea\x98\xe3\xf2\x4f\x6e\x68\xaf\xdf\xfa\x14\x36\x9c\x60\x52\xc1\xe1\xbd\xe2\x47\xac\x80\x74\x2c\x10\x20\xbe\xb1\x42\x0b\x3e\x9d\x33\x7e\xc9\xdc\xf0\xa9\xc7\x17\x77\xca\x93\x37\x98\xd5\x04\x2b\xb3\x0d\xcc\x5b\x39\x93\xa5\xc7\xd3\xec\x4a\x05\x78\xc7\x68\x85\xf8\x01\xfe\xa6\x45\x27\x52\xc2\x51\x2b\x7d\x28\xf2\x40\x5d\xc0\x45\x8f\xff\x56\xd6\x3d\x24\x3b\x49\x02\x15\xdf\x4a\x1f\xb0\x15\x77\x11\xc0\x21\x07\x69\x8e\x0b\x79\x9a\x33\x76\xeb\x3b\x84\xa4\xef\x70\xc1\x8d\x6f\x28\x7c\xdc\xe3\xfd\x03\x94\x18\x6b\x12\x6e\x49\x93\x05\xd0\xb1\xfd\xd1\x9d\x91\x5f\x8c\xf3\xcf\x29\xcb\x1d\x3e\xa1\xb2\xc3\xce\x2c\x68\x4b\x1d\x6e\xa0\x2e\xc5\x51\xac\x2d\x2e\xb2\xa8\x6e\x7e\xb0\x28\xdb\x79\xed\x13\xa5\xe7\x7d\x1a\x76\x1f\xfc\x64\xe7\x32\xad\x4c\xff\x7c\x1a\x5d\x48\xb6\x0e\xd8\xb1\xc3\x80\x48\x91\x39\x24\x0a\xce\x98\xf7\xb9\xe1\x1e\xe0\xc9\xf8\x70\x00\xee\x64\xf3\x18\xd4\x49\xdd\x4c\xf2\x0a\xcb\x38\x2c\xeb\x75\x27\x7b\x9c\x13\xe4\x5a\x42\x8c\xd1\x99\x31\x13\x60\x08\xf5\x6e\x1d\xde\x81\x51\x16\xef\x4c\x8e\xfc\xa2\xf0\x71\xa1\x6c\x20\x79\xad\x1e\x5f\x15\x3c\x12\x2b\x63\x60\x25\xe5\xb2\x77\x54\x1d\x53\x4f\x31\xcd\xcc\x20\xef\x35\x7b\x86\xb5\xc6\x75\xfd\xe5\x34\xe3\xe9\x0f\x09\x88\xec\x39\x8e\x17\xe3\x3c\x33\x74\x81\x23\x66\x35\x7e\x40\x2f\x5a\x5e\x52\x55\x40\x79\x90\x00\xec\x2e\x3c\x22\x39\x35\xc8\x18\x9e\x59\x58\xc5\xd2\x28\x9f\xc0\xa0\x37\x5f\xff\x46\x4e\xfe\x05\x75\xaa\x89\xc7\x67\x44\x0a\x52\xb0\xab\xaa\x28\xe0\x82\x6d\xc3\xe3\xdf\xb7\x08\xa4\xef\x07\xa7\x79\xde\xab\xd8\xcf\xe5\x82\xf6\xd7\xcc\x01\xf9\xf3\xd2\x78\x29\xd2\x32\x2e\xde\x10\x42\xd7\xbf\x0e\xe3\xab\x2e\xbf\x5e\x58\xd5\x41\xd0\x44\x13\xfa\x81\x94\xae\x0c\x31\xc3\xb7\xb0\xfa\xb0\x0f\x51\x67\x37\xe8\xc6\xa3\x7a\xa4\x81\x41\xd2\x18\xc7\x0c\x4f\x99\x3b\xca\x97\x53\x61\x02\x22\x91\xec\x7d\x34\x36\x7e\x5d\x06\xc6\xa4\x6c\x4b\x44\x98\xde\x04\xc6\x2b\xc2\x19\xd8\xea\x5d\xef\x8d\x6f\xa1\xb2\x47\x4f\x0c\x1b\x01\xf5\x9f\x23\xa4\x99\x1b\xb9\x04\xea\xf0\x4e\x27\x21\xd4\xac\x5b\xce\xfc\x73\x24\x16\x51\xa7\xee\x98\x5f\xc4\xfd\xa7\x94\x70\x8c\xbd\xc0\xdc\x3e\x7e\xf8\xdd\xaf\xbd\xc2\x42\x1b\xb6\x92\x24\xd7\xb8\x85\x48\x03\xe6\x45\xdb\x3d\x61\x91\x4a\x5c\x74\x25\x36\x7d\x87\x4e\xe5\x9e\x1e\x3d\x61\x0c\xa0\xa1\x0b\xe2\x02\xbc\x1a\x18\x48\x92\x81\x9c\xc7\x51\x1d\x46\xcc\x61\x8d\x23\xe6\xb8\x79\x3e\x2a\xf3\x6f\xd0\x68\xef\x78\x59\x65\x71\x9e\x13\x47\x55\x55\x0b\xce\xb0\xc2\x18\x6e\x26\x4b\x80\x9f\xaf\x6d\xba\x83\x09\xe6\x45\x2f\x64\xc5\x34\xd7\xa2\x37\xcf\x4f\x94\x54\xe6\x72\x6a\x39\x7a\xcd\xdf\x4d\x1f\x7b\x0c\xfb\x2b\x8b\x59\xc2\x5d\xee\x63\xd3\x58\xe8\x07\xe1\x9a\x4f\xf3\x91\x88\xcf\x82\x84\xd3\x3c\x5f\xa0\x7b\xdc\xe9\xf5\x7c\x98\x80\x4d\xaf\x28\x42\xc8\x68\x31\x66\xe1\xe9\x1c\x81\x68\x81\x0b\x47\x0c\x1a\x35\x7c\x8c\x46\x22\x5b\xd0\x40\x16\x58\xc9\x21\x1e\xcf\x30\x3e\x7a\x04\xce\x67\x53\xf1\x4f\x7c\xa1\xa1\x08\x09\xa5\x62\xa7\x61\x9a\x82\x7c\xc5\xf6\x92\xd2\xff\x28\x7d\x33\x0a\xb5\xc2\x49\x39\xe5\xc4\x3c\x8a\x4f\x06\x77\xf0\x5c\xe1\xe6\x4c\x65\xe4\x27\x97\x87\x56\xba\x4a\x1c\xc6\x67\x9a\x00\xfb\xf9\x73\xe1\x33\x78\x90\xe7\x00\x9a\x0a\x74\xfc\x4c\x00\x9d\x97\x27\x35\x2e\x59\x60\xce\x0a\xac\x70\x6a\x5f\x9f\x11\x3f\xce\x97\x8e\xfc\xf0\x6b\x82\xf9\xf9\xcd\xff\xac\x78\x67\x8d\xef\x5e\xa3\xba\xa3\xb1\x94\xf1\xa1\x1c\xd2\x5a\x4f\x9f\xf7\xb2\xb2\x1d\xea\xf5\xbc\x89\xa2\x27\x7c\x3b\xc8\xce\xb3\xe2\xab\x30\xde\x20\xab\x98\xa2\xc2\x3a\x8f\x42\xc1\xf5\xca\x99\x29\xed\x12\xff\xfe\xfc\x7b\xd0\x68\x4e\xe1\x42\xda\x67\x3f\x2e\x47\x13\x14\x26\x84\xa8\xc8\xa7\x0a\xd5\x3b\xe0\xd8\x8e\x5d\x48\xbc\x85\xc2\xf5\x43\xe9\xeb\x47\x69\xdd\x26\x2f\x30\xc7\xb6\x1e\x22\xd3\x9f\x29\x28\x89\x18\xfd\x08\xf7\xc0\x6d\x41\x22\xdd\xc8\x45\xba\x3b\x44\x9c\x01\xfc\x77\x41\x04\x97\xee\x9a\xdf\x07\xa7\x77\x35\x34\xbe\xe2\xb6\x21\xff\x39\x94\x56\x32\x7c\xe3\x10\xb1\x04\x29\xe1\x4a\xee\xc2\xbb\x63\x72\x93\x73\xb6\x0f\x0f\x41\x30\xac\xeb\x94\x92\x86\x23\x12\x8c\x19\xb5\x8d\x9b\x16\x5c\xcb\x1c\x5b\x7e\xc8\xa3\x2a\xa7\x80\x73\xdf\xe9\x4a\xbf\xe7\xc2\xaa\x6b\x00\x9a\x42\x38\xf2\xce\xf9\x1a\x35\x6d\x16\x35\x41\x78\xa6\x6c\x6e\x6c\xfe\xd3\xe4\x79\x7a\x19\x3d\x1e\x90\x44\x50\xf1\x08\x0e\x8e\x4e\xf0\xd8\xf9\x97\x21\x59\xf6\x72\xb6\x12\x83\xbc\xc7\x4c\x30\xef\x4f\x5e\x5f\xae\x10\x3b\xdd\x50\x9a\x39\x61\xfa\xb6\x9c\xfe\x3a\xa4\xcc\x7e\x15\x72\xa5\x38\x3c\x20\x87\x49\xab\xbb\x09\x56\x2a\xac\xc2\xcb\x04\xf3\x9f\x6e\x20\x18\x0f\x48\xb3\x53\xb7\x96\x67\xa7\x3a\x8c\x72\x32\x81\xf8\xdb\x0d\x24\x82\x00\x83\x07\x61\x80\x71\x63\xc1\x62\x22\xc7\x2f\x82\x8f\x86\x1b\x45\x11\xa0\xc0\x9a\x7b\xa1\xfd\xaa\xde\x9e\x7c\x6a\x02\x2b\x57\xcd\xf1\x42\xbc\xa6\x6b\x50\xc2\x77\x2c\x94\x70\x48\x70\x25\x2a\xf5\x12\x15\x48\x04\x01\x3a\xc0\xb4\x57\x50\x00\x2e\xd8\x78\xee\x16\x1f\x40\x7c\xad\x08\x1c\xd3\x0c\x1d\xfe\x76\x03\x74\x78\x84\xf3\x6f\x45\xe5\xb4\x60\xf0\xb6\x87\x2e\x25\x87\x35\xaa\xf4\xa9\x18\x22\xc0\x43\xe9\x94\x31\x59\xdc\xde\xd8\xee\x4e\x11\x89\x60\x81\x2d\xfe\x58\x92\x48\x04\x9a\xf2\xc5\x1f\x4b\x13\x89\x68\xff\x63\x8c\xff\x2e\xc6\x48\xb6\xee\xd3\x90\xc7\x0c\x77\xf8\x14\x11\xb9\xf9\x73\xd9\xbf\xe8\xbe\x6e\xa8\x50\xcd\x09\xa5\x29\x0d\xf1\xcd\xd7\x18\xfc\x7f\xf5\xe5\x0a\x4b\xaa\x00\x3a\x8c\x2f\xb0\x6a\x97\xca\x01\x3a\x7c\x5e\xc7\xe4\x79\xb1\x87\x08\x88\x7e\x72\x93\xa4\x32\x92\x8a\x43\x96\x15\x0b\xf7\x74\x95\x81\x7a\x21\xc0\xfb\xaa\x8d\xeb\xa2\x22\x4e\x84\x5f\x84\x7c\xf3\x75\xa8\xe8\x8d\xae\x5c\xcc\x98\x16\x7b\xd9\xec\xd4\x90\x33\x5d\xcc\x18\xc1\x0e\x9c\x2b\xff\x0e\x3d\xce\xbc\x2a\x67\x3e\xfb\xab\x6f\x5f\xae\xa6\x45\x98\xab\xe4\xdd\xe6\xdc\xab\x3b\x69\xcb\xbf\xa7\x18\xa7\x88\x14\x57\x9e\x63\x2e\x98\xfa\x95\xaa\x0c\xe7\x39\xaf\xcd\x70\x59\x12\x39\x0e\x0c\x19\x9a\xc4\xc4\x06\xb9\xb9\x7a\xc7\x5b\xc1\x3c\x58\x07\x6d\xb1\xe6\x29\xc3\x8a\xbf\xe5\x4f\xcc\xbf\xf5\xb2\xe9\x74\x77\x9a\x05\x02\xd6\x0a\x83\xb8\x2a\x23\x05\x24\x0f\x42\x2e\xc4\xcf\xe8\x26\x0f\xa5\x46\xe0\x70\x63\xc2\xb8\xf4\x85\x3c\x71\x93\xc2\x84\x18\x2b\x74\xa2\x52\xf4\x43\xb4\xa3\xe6\x83\x10\xbb\xf9\x22\x1e\xca\xb2\x87\x11\x31\x9b\xe5\xf4\xae\x01\xb3\x04\xe6\xc0\x3d\xe2\xba\x10\xfa\x7d\x03\x97\xfe\xf8\x17\x9e\xaf\x44\xa8\x0d\xa7\x8c\xe1\xc3\x90\x8a\x97\x69\x15\x48\x50\x0c\x04\xb9\x9c\x4d\xc9\xd1\x8c\xcb\x36\xc7\x2b\x2e\x94\xf9\x72\xab\x5f\x63\x16\xe2\x91\x71\x0d\x3f\xa5\x0a\xb5\x86\x3d\xe6\x9d\xfd\x04\x8f\x78\x3a\x2a\xed\x5a\x89\xa5\x1f\x03\x6d\x14\xff\x77\xf9\x0c\x24\xf5\x26\x20\x65\xfe\x36\x62\x86\xbf\xe7\x93\x94\x24\xc4\x1a\x83\xa2\xd9\xd2\x3d\xdf\x8e\xc6\x10\x2a\xf7\x6e\x0d\x8e\x2f\x86\x8f\xc4\x93\x98\x20\xc6\x7c\x69\x55\xdb\xf8\x87\x77\xb2\x3a\xa2\x85\x23\x14\xcb\xb6\xf5\x26\x49\x72\x73\xe5\x0e\x97\xdf\x97\x78\x0b\x25\xa6\x8c\x1c\xea\xad\x79\x36\xef\x52\xab\xce\xea\xc2\x61\x75\x82\x33\x96\x72\x5b\xe5\x8f\x3e\xaf\xc0\xa0\xfc\xf0\xfc\x97\x97\xdf\xe3\xd8\x8c\xc7\xff\x15\x00\x00\xff\xff\xcd\x05\xc0\xed\xbc\x3f\x00\x00")

func groups_yml_bytes() ([]byte, error) {
	return bindata_read(
		_groups_yml,
		"groups.yml",
	)
}

func groups_yml() (*asset, error) {
	bytes, err := groups_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "groups.yml", size: 16316, mode: os.FileMode(420), modTime: time.Unix(1423581971, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"groups.yml": groups_yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"groups.yml": &_bintree_t{groups_yml, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

