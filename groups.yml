instance:
  uptime:
    help: "The value of the uptime field corresponds to the number of seconds that the mongos or mongod process has been active."
    type: counter
  uptime_estimate:
    help: "uptimeEstimate provides the uptime as calculated from MongoDB's internal course-grained time keeping system."
    type: counter
  local_time:
    help: "The localTime value is the current time, according to the server, in UTC specified in an ISODate format."
    type: counter

asserts:
  regular:
    help: "The regular counter tracks the number of regular assertions raised since the server process started. Check the log file for more information about these messages."
    type: counter
  warning:
    help: "The warning counter tracks the number of warnings raised since the server process started. Check the log file for more information about these warnings."
    type: counter
  msg:
    help: "The msg counter tracks the number of message assertions raised since the server process started. Check the log file for more information about these messages."
    type: counter
  user:
    help: "The user counter reports the number of “user asserts” that have occurred since the last time the server process started. These are errors that user may generate, such as out of disk space or duplicate key. You can prevent these assertions by fixing a problem with your application or deployment. Check the MongoDB log for more information."
    type: counter
  rollovers:
    help: "The rollovers counter displays the number of times that the rollover counters have rolled over since the last time the server process started. The counters will rollover to zero after 230 assertions. Use this value to provide context to the other values in the asserts data structure."
    type: counter

background_flushing:
  flushes:
    help: "flushes is a counter that collects the number of times the database has flushed all writes to disk. This value will grow as database runs for longer periods of time"
    type: counter
  total_ms:
    help: "The total_ms value provides the total number of milliseconds (ms) that the mongod processes have spent writing (i.e. flushing) data to disk. Because this is an absolute value, consider the value offlushes and average_ms to provide better context for this datum"
    type: counter
  average_ms:
    help: "The average_ms value describes the relationship between the number of flushes and the total amount of time that the database has spent writing data to disk. The larger flushes is, the more likely this value is likely to represent a \"normal,\" time; however, abnormal data can skew this value"
    type: gauge
  last_ms:
    help: "The value of the last_ms field is the amount of time, in milliseconds, that the last flush operation took to complete. Use this value to verify that the current performance of the server and is in line with the historical data provided by average_ms and total_ms"
    type: gauge
  last_finished:
    help: "The last_finished field provides a timestamp of the last completed flush operation in the ISODateformat. If this value is more than a few minutes old relative to your server’s current time and accounting for differences in time zone, restarting the database may result in some data loss"
    type: gauge

connections:
  current:
    help: "The value of current corresponds to the number of connections to the database server from clients. This number includes the current shell session. Consider the value of available to add more context to this datum"
    type: gauge
  available:
    help: "available provides a count of the number of unused available incoming connections the database can provide. Consider this value in combination with the value of current to understand the connection load on the database, and the UNIX ulimit Settings document for more information about system thresholds on available connections"
    type: gauge
  total_created:
    help: "totalCreated provides a count of all incoming connections created to the server. This number includes connections that have since closed"
    type: counter

durability:
  commits:
    help: "The commits provides the number of transactions written to the journal during the last journal group commit interval."
    type: gauge
  journaled_mb:
    help: "The journaledMB provides the amount of data in megabytes (MB) written to journal during the last journal group commit interval"
    type: gauge
  write_to_data_files_mb:
    help: "The writeToDataFilesMB provides the amount of data in megabytes (MB) written from journal to the data files during the last journal group commit interval"
    type: gauge
  compression:
    help: "The compression represents the compression ratio of the data written to the journal:
( journaled_size_of_data / uncompressed_size_of_data )"
    type: gauge
  commits_in_write_lock:
    help: "The commitsInWriteLock provides a count of the commits that occurred while a write lock was held. Commits in a write lock indicate a MongoDB node under a heavy write load and call for further diagnosis"
    type: gauge
  early_commits:
    help: "The earlyCommits value reflects the number of times MongoDB requested a commit before the scheduled journal group commit interval. Use this value to ensure that your journal group commit interval is not too long for your deployment"
    type: summary

durability_time_ms:
  dt:
    help: "The dt value provides, in milliseconds, the amount of time over which MongoDB collected the timeMSdata. Use this field to provide context to the other timeMS field values"
    type: summary
  prep_log_buffer:
    help: "The prepLogBuffer value provides, in milliseconds, the amount of time spent preparing to write to the journal. Smaller values indicate better journal performance"
    type: summary
  write_to_journal:
    help: "The writeToJournal value provides, in milliseconds, the amount of time spent actually writing to the journal. File system speeds and device interfaces can affect performance"
    type: summary
  write_to_data_files:
    help: "The writeToDataFiles value provides, in milliseconds, the amount of time spent writing to data files after journaling. File system speeds and device interfaces can affect performance"
    type: summary
  remap_private_view:
    help: "The remapPrivateView value provides, in milliseconds, the amount of time spent remapping copy-on-write memory mapped views. Smaller values indicate better journal performance"
    type: summary

extra_info:
  page_faults:
    help: "The page_faults Reports the total number of page faults that require disk operations. Page faults refer to operations that require the database server to access data which isn’t available in active memory. The page_faults counter may increase dramatically during moments of poor performance and may correlate with limited memory environments and larger data sets. Limited and sporadic page faults do not necessarily indicate an issue"
    type: gauge
  heap_usage_bytes:
    help: "The heap_usage_bytes field is only available on Unix/Linux systems, and reports the total size in bytes of heap space used by the database process"
    type: gauge

global_lock:
  total_time:
    help: "The value of totalTime represents the time, in microseconds, since the database last started and creation of the globalLock. This is roughly equivalent to total server uptime"
    type: counter
  lock_time:
    help: "The value of lockTime represents the time, in microseconds, since the database last started, that the globalLock has been held"
    type: counter
  ratio:
    help: "The value of ratio displays the relationship between lockTime and totalTime. Low values indicate that operations have held the globalLock frequently for shorter periods of time. High values indicate that operations have held globalLock infrequently for longer periods of time"
    type: gauge

global_lock_current_queue:
  total:
    help: "The value of total provides a combined total of operations queued waiting for the lock. A consistently small queue, particularly of shorter operations should cause no concern. Also, consider this value in light of the size of queue waiting for the read lock (e.g. readers) and write lock (e.g. writers) individually"
    type: gauge
  readers:
    help: "The value of readers is the number of operations that are currently queued and waiting for the read lock. A consistently small read-queue, particularly of shorter operations should cause no concern"
    type: gauge
  writers:
    help: "The value of writers is the number of operations that are currently queued and waiting for the write lock. A consistently small write-queue, particularly of shorter operations is no cause for concern"
    type: gauge

global_lock_client:
  total:
    help: "The value of total is the total number of active client connections to the database. This combines clients that are performing read operations (e.g. readers) and clients that are performing write operations (e.g. writers)"
    type: gauge
  readers:
    help: "The value of readers contains a count of the active client connections performing read operations"
    type: gauge
  writers:
    help: "The value of writers contains a count of active client connections performing write operations"
    type: gauge

index_counters:
  accesses:
    help: "accesses reports the number of times that operations have accessed indexes. This value is the combination of the hits and misses. Higher values indicate that your database has indexes and that queries are taking advantage of these indexes. If this number does not grow over time, this might indicate that your indexes do not effectively support your use"
    type: counter
  hits:
    help: "The hits value reflects the number of times that an index has been accessed and mongod is able to return the index from memory. A higher value indicates effective index use. hits values that represent a greater proportion of the accesses value, tend to indicate more effective index configuration"
    type: counter
  misses:
    help: "The misses value represents the number of times that an operation attempted to access an index that was not in memory. These “misses,” do not indicate a failed query or operation, but rather an inefficient use of the index. Lower values in this field indicate better index use and likely overall performance as well"
    type: counter
  resets:
    help: "The resets value reflects the number of times that the index counters have been reset since the database last restarted. Typically this value is 0, but use this value to provide context for the data specified by other indexCounters values"
    type: gauge
  miss_ratio:
    help: "The missRatio value is the ratio of hits to misses. This value is typically 0 or approaching 0"
    type: gauge

locks_time_locked_micros:
  global_r:
    help: "The R field reports the amount of time in microseconds that any database has held the global read lock"
    type: counter
  local_r:
    help: "The r field reports the amount of time in microseconds that any database has held the local read lock"
    type: counter
  global_w:
    help: "The W field reports the amount of time in microseconds that any database has held the global write lock"
    type: counter
  local_w:
    help: "The w field reports the amount of time in microseconds that any database has held the local write lock"
    type: counter

locks_time_acquiring_micros:
  global_w:
    help: "The W field reports the amount of time in microseconds that any database has spent waiting for the global write lock"
    type: counter
  global_r:
    help: "The R field reports the amount of time in microseconds that any database has spent waiting for the global read lock"
    type: counter

network:
  bytes_in:
    help: "The value of the bytesIn field reflects the amount of network traffic, in bytes, received by this database. Use this value to ensure that network traffic sent to the mongod process is consistent with expectations and overall inter-application traffic"
    type: counter
  bytes_out:
    help: "The value of the bytesOut field reflects the amount of network traffic, in bytes, sent from this database. Use this value to ensure that network traffic sent by the mongod process is consistent with expectations and overall inter-application traffic"
    type: counter
  num_requests:
    help: "The numRequests field is a counter of the total number of distinct requests that the server has received. Use this value to provide context for the bytesIn and bytesOut values to ensure that MongoDB’s network utilization is consistent with expectations and application use"
    type: counter

op_counters:
  insert:
    help: "insert provides a counter of the total number of insert operations received since the mongod instance last started."
    type: counter
  query:
    help: "query provides a counter of the total number of queries received since the mongod instance last started"
    type: counter
  update:
    help: "update provides a counter of the total number of update operations recieved since the mongod instance last started"
    type: counter
  delete:
    help: "delete provides a counter of the total number of delete operations since the mongod instance last started"
    type: counter
  getmore:
    help: "getmore provides a counter of the total number of “getmore” operations since the mongod instance last started. This counter can be high even if the query count is low. Secondary nodes send getMore operations as part of the replication process"
    type: counter
  command:
    help: "command provides a counter of the total number of commands issued to the database since the mongod instance last started."
    type: counter

op_counters_repl:
  insert:
    help: "insert provides a counter of the total number of replicated insert operations since the mongod instance last started"
    type: counter
  query:
    help: "query provides a counter of the total number of replicated queries since the mongod instance last started"
    type: counter
  update:
    help: "update provides a counter of the total number of replicated update operations since the mongod instance last started"
    type: counter
  delete:
    help: "delete provides a counter of the total number of replicated delete operations since the mongod instance last started"
    type: counter
  getmore:
    help: "getmore provides a counter of the total number of “getmore” operations since the mongod instance last started. This counter can be high even if the query count is low. Secondary nodes send getMore operations as part of the replication process"
    type: counter
  command:
    help: "command provides a counter of the total number of replicated commands issued to the database since the mongod instance last started"
    type: counter

memory:
  bits:
    help: "The value of bits is either 64 or 32, depending on which target architecture specified during the mongod compilation process. In most instances this is 64, and this value does not change over time"
    type: counter
  resident:
    help: "The value of resident is roughly equivalent to the amount of RAM, in megabytes (MB), currently used by the database process. In normal use this value tends to grow. In dedicated database servers this number tends to approach the total amount of system memory"
    type: counter
  virtual:
    help: "virtual displays the quantity, in megabytes (MB), of virtual memory used by the mongod process. With journaling enabled, the value of virtual is at least twice the value of mapped. If virtual value is significantly larger than mapped (e.g. 3 or more times), this may indicate a memory leak"
    type: gauge
  mapped:
    help: "The value of mapped provides the amount of mapped memory, in megabytes (MB), by the database. Because MongoDB uses memory-mapped files, this value is likely to be to be roughly equivalent to the total size of your database or databases"
    type: gauge
  mapped_with_journal:
    help: "mappedWithJournal provides the amount of mapped memory, in megabytes (MB), including the memory used for journaling. This value will always be twice the value of mapped. This field is only included if journaling is enabled"
    type: counter

metrics_cursor_timedOut:
  help: "FIXME"
  type: gauge

